import requests
import time

def measure_api_request_time(url,data):
  # Start the timer
  start_time = time.time()
  
  # Make the API request
  try:
    response = requests.post(url, json=data)
    response.raise_for_status()  # Raises a HTTPError for bad responses (4XX, 5XX)
  except requests.exceptions.HTTPError as errh:
    print ("Http Error:", errh)
  except requests.exceptions.ConnectionError as errc:
    print ("Error Connecting:", errc)
  except requests.exceptions.Timeout as errt:
    print ("Timeout Error:", errt)
  except requests.exceptions.RequestException as err:
    print ("OOps: Something Else", err)

  # Stop the timer
  end_time = time.time()
  
  # Calculate the duration
  duration = end_time - start_time
  
  if response.ok:
    print(f"Request successful: Status code {response.status_code}")
    print(f"Response: {response.text}")
    print(f"Response Time: {duration:.3f} seconds")
  else:
    print(f"Request failed with status code: {response.status_code}")
  
  return duration

# Example usage
if __name__ == "__main__":
    url = "http://localhost:4000/predict"  # Example API endpoint
    print(f"Measuring request time for API endpoint: {url}")
    data = {'features': [[ 3.91161501e-01,  2.14240775e-01,  1.92983225e-01,
        -2.11018678e-02,  1.70788181e+00,  1.52506065e+00,
         2.76130959e-02,  8.12772312e-04,  5.01116467e+00,
         3.31112981e-01, -5.92920065e-01, -4.13680362e-04],
       [ 2.71645010e-01,  6.04943261e-02,  1.61008835e-01,
        -1.67206058e-02,  1.66241348e+00,  1.37884629e+00,
         4.30924073e-02,  1.23021961e-03,  3.85931897e+00,
         6.08117640e-01,  1.31335449e+00, -1.91615126e-03],
       [ 2.66372949e-01,  1.32894754e-01,  1.39798701e-01,
        -2.43277120e-02,  1.55518353e+00,  1.38296616e+00,
         5.50929867e-02,  1.00834994e-03,  4.27512980e+00,
         7.35310853e-01,  1.05957031e+00,  2.82034511e-04],
       [ 7.96797201e-02,  2.02165321e-01,  1.02369264e-01,
         2.48568099e-03,  1.65620971e+00,  1.48383796e+00,
         4.32149395e-02,  4.73308290e-04,  4.50039434e+00,
         5.32353699e-01,  1.80339265e+00, -2.00592075e-03],
       [ 2.19807431e-01,  1.35443270e-01,  1.85334057e-01,
         5.56160581e-02,  1.74757254e+00,  1.80064511e+00,
         6.17348589e-02,  3.65251035e-05,  7.05097866e+00,
         1.20765738e-01, -1.20538330e+00,  1.86807441e-03],
       [ 3.03294897e-01,  1.78434655e-01,  1.63475767e-01,
         1.09969719e-02,  1.58323669e+00,  1.38468027e+00,
         5.61469644e-02,  5.30258403e-04,  4.23900509e+00,
         1.25681207e-01, -2.38646817e+00, -3.17562837e-04],
       [ 1.97295129e-01,  2.26984486e-01,  1.77044570e-01,
         9.03716813e-03,  1.61064422e+00,  1.31498194e+00,
         5.73742874e-02,  5.98089653e-04,  3.96770096e+00,
         1.96437284e-01, -7.87170410e-01, -1.10394566e-03],
       [ 2.12448597e-01,  1.36889648e+00,  4.38852578e-01,
         1.14134563e-02,  1.59416127e+00,  1.16188455e+00,
         5.68523109e-02,  1.05086609e-03,  3.34530973e+00,
         2.60591000e-01,  6.07574463e-01, -1.55587975e-06],
       [ 1.91952780e-01,  1.61728933e-01,  1.51094139e-01,
        -6.87500547e-03,  1.61219954e+00,  1.32006443e+00,
         4.99840528e-02,  8.23197246e-04,  3.66430545e+00,
         3.09243917e-01, -9.52067733e-01,  8.31577927e-04],
       [ 3.35651964e-01,  1.98404357e-01,  1.48926780e-01,
        -1.54443313e-02,  1.71503735e+00,  1.34182560e+00,
         3.87024507e-02,  1.49558799e-03,  3.75498629e+00,
         1.46841660e-01, -1.11954594e+00,  1.36468676e-03],
       [ 2.14530334e-01,  6.87683105e-01,  2.85053462e-01,
        -4.00881045e-01,  1.11331928e+00,  1.15101182e+00,
         2.03446671e-01,  9.72290873e-04,  2.60595179e+00,
         2.17554674e-01,  6.10290527e-01, -2.32351515e-02],
       [ 2.84717858e-01,  1.86650604e-01,  1.39226824e-01,
        -1.61788373e-02,  1.54591036e+00,  1.41875112e+00,
         5.56785613e-02,  9.55638243e-04,  4.22441912e+00,
         5.67496657e-01,  2.12793350e+00,  1.75936060e-04],
       [ 1.83186382e-01,  5.89459389e-02,  1.17917262e-01,
        -1.59616408e-02,  1.60839689e+00,  1.27045453e+00,
         5.68177514e-02,  3.35989258e-04,  3.40556788e+00,
         3.30521166e-01,  1.40973246e+00,  1.19695126e-03],
       [ 1.39821023e-01,  6.13174021e-01,  2.89439529e-01,
         7.64345884e-04,  1.52177393e+00,  1.40060925e+00,
         6.03856407e-02,  8.25922703e-04,  4.07906485e+00,
         4.86662060e-01,  5.03082275e-01,  1.90545150e-04],
       [ 2.50421554e-01,  2.24578530e-01,  1.91829070e-01,
        -8.97801248e-03,  1.38216913e+00,  1.29045558e+00,
         9.12219435e-02,  5.07710094e-04,  4.02215195e+00,
         7.70125031e-01, -1.37203979e+00,  3.35350563e-03]]}
    measure_api_request_time(url,data)
